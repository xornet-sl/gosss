/*
Copyright Â© 2020 Vladimir Sukhonosov. Contacts: founder.sl@gmail.com

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package shamir

import (
	"crypto/rand"
	"fmt"
	mrand "math/rand"
	"sync"
	"testing"

	"github.com/stretchr/testify/assert"
)

type polynomialTestdata struct {
	coefs   []uint8
	xCoords []uint8
	yCoords []uint8
}

var polynomialTests = []polynomialTestdata{
	{[]uint8{0xd8, 0x30, 0x8c, 0xc5, 0x95, 0x4d}, []uint8{0x5e, 0xad, 0x67, 0x94, 0x54, 0x35}, []uint8{0xbe, 0xe8, 0x84, 0xea, 0x63, 0x79}},
	{[]uint8{0xf0, 0xbe, 0x55, 0xde, 0xae, 0xf7}, []uint8{0x9e, 0xbf, 0x5c, 0xc4, 0x60, 0xd0}, []uint8{0x9d, 0x82, 0x51, 0xd1, 0x58, 0x59}},
	{[]uint8{0x7d, 0x79, 0xd7, 0x15, 0x0f, 0x8d}, []uint8{0x3e, 0x7d, 0x5f, 0xa5, 0x07, 0xe1}, []uint8{0x96, 0x5a, 0x82, 0xc7, 0x3b, 0xe3}},
	{[]uint8{0x66, 0x63, 0x4b, 0x02, 0x26, 0xbf}, []uint8{0x44, 0x40, 0xb6, 0x05, 0x0f, 0xb8}, []uint8{0xfe, 0x90, 0xc8, 0xe0, 0xb6, 0xc0}},
	{[]uint8{0xfa, 0x59, 0x0b, 0x19, 0xd4, 0x62}, []uint8{0xea, 0xb1, 0xa2, 0x58, 0x52, 0x5d}, []uint8{0xe5, 0xc4, 0xcc, 0x4a, 0x04, 0xb7}},
	{[]uint8{0x8b, 0x96, 0xa8, 0xba, 0xd4, 0x91}, []uint8{0x56, 0xd6, 0x5a, 0x4a, 0x66, 0x28}, []uint8{0xc1, 0xb8, 0xaf, 0xd1, 0xb6, 0x8e}},
	{[]uint8{0xea, 0xc5, 0x4a, 0x3a, 0x0e, 0xd6}, []uint8{0x4f, 0x38, 0xda, 0xa4, 0x94, 0x5f}, []uint8{0xda, 0x84, 0x1c, 0xaa, 0xc8, 0x16}},
	{[]uint8{0x50, 0x61, 0xd3, 0xb7, 0x3f, 0x08}, []uint8{0x78, 0x55, 0xd5, 0x01, 0x67, 0x28}, []uint8{0x6a, 0xd9, 0xeb, 0x62, 0x9f, 0xae}},
	{[]uint8{0xa4, 0xae, 0xd3, 0x10, 0xbd, 0xcd}, []uint8{0xd3, 0x17, 0xcc, 0xea, 0x93, 0x01}, []uint8{0x17, 0xb9, 0x7f, 0x70, 0xb1, 0xb9}},
	{[]uint8{0xec, 0xa6, 0x26, 0x7f, 0xc2, 0x19}, []uint8{0x74, 0xe2, 0xb6, 0x39, 0x0d, 0x2b}, []uint8{0x53, 0x34, 0xfb, 0x90, 0x10, 0x65}},
}

type splitPartsTestdata struct {
	secret  []byte
	coefs   []uint8
	xCoords []uint8
	parts   [][]byte
}

var splitPartsTests = []splitPartsTestdata{
	{
		[]byte{0xa5, 0x20, 0x0, 0xc3, 0xc9, 0x99, 0x97, 0xd6, 0xb7, 0x14, 0x31, 0x7e, 0x65, 0x1b, 0x32, 0x7e, 0x2c, 0xa2, 0x67, 0x38, 0x93, 0x1d, 0xb9, 0x49, 0x84, 0x3f, 0x22, 0x96, 0x52, 0x9b, 0x9e, 0x10},
		[]uint8{0x00, 0x66, 0xac},
		[]uint8{0x19, 0xbb, 0x48, 0xd1, 0xfc},
		[][]byte{
			[]byte{0x19, 0x26, 0xa3, 0x83, 0x40, 0x4a, 0x1a, 0x14, 0x55, 0x34, 0x97, 0xb2, 0xfd, 0xe6, 0x98, 0xb1, 0xfd, 0xaf, 0x21, 0xe4, 0xbb, 0x10, 0x9e, 0x3a, 0xca, 0x7, 0xbc, 0xa1, 0x15, 0xd1, 0x18, 0x1d, 0x93},
			[]byte{0xbb, 0xb7, 0x32, 0x12, 0xd1, 0xdb, 0x8b, 0x85, 0xc4, 0xa5, 0x6, 0x23, 0x6c, 0x77, 0x9, 0x20, 0x6c, 0x3e, 0xb0, 0x75, 0x2a, 0x81, 0xf, 0xab, 0x5b, 0x96, 0x2d, 0x30, 0x84, 0x40, 0x89, 0x8c, 0x2},
			[]byte{0x48, 0x27, 0xa2, 0x82, 0x41, 0x4b, 0x1b, 0x15, 0x54, 0x35, 0x96, 0xb3, 0xfc, 0xe7, 0x99, 0xb0, 0xfc, 0xae, 0x20, 0xe5, 0xba, 0x11, 0x9f, 0x3b, 0xcb, 0x6, 0xbd, 0xa0, 0x14, 0xd0, 0x19, 0x1c, 0x92},
			[]byte{0xd1, 0x7e, 0xfb, 0xdb, 0x18, 0x12, 0x42, 0x4c, 0xd, 0x6c, 0xcf, 0xea, 0xa5, 0xbe, 0xc0, 0xe9, 0xa5, 0xf7, 0x79, 0xbc, 0xe3, 0x48, 0xc6, 0x62, 0x92, 0x5f, 0xe4, 0xf9, 0x4d, 0x89, 0x40, 0x45, 0xcb},
			[]byte{0xfc, 0xbd, 0x38, 0x18, 0xdb, 0xd1, 0x81, 0x8f, 0xce, 0xaf, 0xc, 0x29, 0x66, 0x7d, 0x3, 0x2a, 0x66, 0x34, 0xba, 0x7f, 0x20, 0x8b, 0x5, 0xa1, 0x51, 0x9c, 0x27, 0x3a, 0x8e, 0x4a, 0x83, 0x86, 0x8},
		},
	},
}

func TestPolynomialRandomness(t *testing.T) {
	const (
		degree     = 10
		iterations = 1000
		threshold  = 2
	)
	seenCoefs := make(map[string]bool)
	copies := 0
	for i := 0; i < iterations; i++ {
		p, _ := newPolynomial(0, degree)
		key := fmt.Sprint(p.coefs)
		if seenCoefs[key] {
			copies++
		} else {
			seenCoefs[key] = true
		}
	}
	assert.Less(t, copies, threshold, fmt.Sprintf("Too many identical polynomials: %d", copies))
}

func TestPolynomialEvaluation(t *testing.T) {
	for _, test := range polynomialTests {
		for xIdx := range test.xCoords {
			p := &polynomial{
				coefs: test.coefs,
			}
			assert.Equal(t, test.yCoords[xIdx], p.evaluate(test.xCoords[xIdx]),
				fmt.Sprintf("Evaluation polynomial %v in %d failed", p.coefs, test.xCoords[xIdx]))
		}
	}
}

func TestPolynomialInterpolation(t *testing.T) {
	for _, test := range polynomialTests {
		p := &polynomial{
			coefs: test.coefs,
		}
		restored, err := interpolate(test.xCoords, test.yCoords, 0)
		assert.Nil(t, err, err)
		assert.Equal(t, p.coefs[0], restored)
	}
}

func TestSplit(t *testing.T) {
	oldNewPolynomial := newPolynomial
	oldfillXCoords := fillXCoords
	defer func() {
		newPolynomial = oldNewPolynomial
		fillXCoords = oldfillXCoords
	}()
	for _, test := range splitPartsTests {
		p := &polynomial{
			coefs: test.coefs,
		}
		newPolynomial = func(intercept, degree uint8) (*polynomial, error) {
			return p, nil
		}
		fillXCoords = func(size uint8) ([]uint8, error) {
			ret := make([]uint8, size)
			for i := uint8(0); i < size; i++ {
				ret[i] = test.parts[i][0]
			}
			return ret, nil
		}
		parts, err := Split(test.secret, 5, 3)
		assert.Nil(t, err, err)
		assert.Equal(t, test.parts, parts)
	}
}

func TestCombine(t *testing.T) {
	for _, test := range splitPartsTests {
		secret, err := Combine(test.parts)
		assert.Nil(t, err, err)
		assert.Equal(t, test.secret, secret)
	}
}

func TestSplitCombine(t *testing.T) {
	var worker = func(_wg *sync.WaitGroup) {
		defer _wg.Done()
		secret := make([]byte, 512)
		rand.Read(secret)
		partsCount := mrand.Intn(64) + 2
		threshold := mrand.Intn(partsCount) + 1
		if threshold == 1 {
			threshold = 2
		}
		parts, err := Split(secret, partsCount, threshold)
		assert.Nil(t, err, err)
		restored, err := Combine(parts)
		assert.Nil(t, err, err)
		assert.Equal(t, secret, restored)
	}
	var wg sync.WaitGroup
	for i := 0; i < 20; i++ {
		wg.Add(1)
		go worker(&wg)
	}
	wg.Wait()
}
